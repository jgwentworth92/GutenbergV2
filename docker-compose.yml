version: "3"
services:
  kafka_b:
    image: bitnami/kafka:latest
    hostname: kafka_b
    ports:
      - "9092:9092"
      - "9094:9094"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092,EXTERNAL://kafka_b:9094
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@127.0.0.1:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_NUM_PARTITIONS=3
    healthcheck:
      test: ["CMD", "sh", "-c", "unset JMX_PORT; kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 10s
      timeout: 10s
      retries: 5

  init-topics:
    image: bitnami/kafka:latest
    container_name: init_topics
    command: >
      sh -c "
        /opt/bitnami/kafka/bin/kafka-topics.sh --create --if-not-exists --bootstrap-server kafka_b:9094 --replication-factor 1 --partitions 3 --topic QdrantOutput &&
        /opt/bitnami/kafka/bin/kafka-topics.sh --create --if-not-exists --bootstrap-server kafka_b:9094 --replication-factor 1 --partitions 3 --topic repos-topic &&
        /opt/bitnami/kafka/bin/kafka-topics.sh --create --if-not-exists --bootstrap-server kafka_b:9094 --replication-factor 1 --partitions 3 --topic github-commits-out &&
        /opt/bitnami/kafka/bin/kafka-topics.sh --create --if-not-exists --bootstrap-server kafka_b:9094 --replication-factor 1 --partitions 3 --topic addtovectordb
      "
    depends_on:
      kafka_b:
        condition: service_healthy

  github_listener:
    build: .
    container_name: github_retriever
    depends_on:
      init-topics:
        condition: service_completed_successfully
    environment:
      BROKERS: "${BROKERS}"
      INPUT_TOPIC: "${INPUT_TOPIC}"
      OUTPUT_TOPIC: "${OUTPUT_TOPIC}"
      GITHUB_TOKEN: "${GITHUB_TOKEN}"
      CONSUMER_CONFIG: "${CONSUMER_CONFIG}"
      PRODUCER_CONFIG: "${PRODUCER_CONFIG}"
    volumes:
      - ./recovery/github_listener:/bytewax/recovery/github_listener
    command: ["python", "-m", "bytewax.run", "-r", "/bytewax/recovery/commit_summary_service", "-s", "3", "-b", "0", "-w4", "dataflows/commit_summary_service"]

  commit_summary_service:
    build: .
    container_name: commit_summary_service
    depends_on:
      init-topics:
        condition: service_completed_successfully
    environment:
      BROKERS: "${BROKERS}"
      OUTPUT_TOPIC: "${OUTPUT_TOPIC}"
      GITHUB_TOKEN: "${GITHUB_TOKEN}"
      PROCESSED_TOPIC: "${PROCESSED_TOPIC}"
      CONSUMER_CONFIG: "${CONSUMER_CONFIG}"
      PRODUCER_CONFIG: "${PRODUCER_CONFIG}"
      TEMPLATE: "${TEMPLATE}"
      OPENAI_API_KEY: "${OPENAI_API_KEY}"
    volumes:
      - ./recovery/commit_summary_service:/bytewax/recovery/commit_summary_service
    command: ["python", "-m", "bytewax.run", "-r", "/bytewax/recovery/github_listener", "-s", "3", "-b", "0", "-w4", "dataflows/github_commit_processing"]
  qdrant:
    image: qdrant/qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant-storage:/qdrant/storage:z

  add_qdrant_service:
    build: .
    container_name: add_qdrant_service
    depends_on:
      init-topics:
        condition: service_completed_successfully
    environment:
      BROKERS: "${BROKERS}"
      OUTPUT_TOPIC: "${OUTPUT_TOPIC}"
      GITHUB_TOKEN: "${GITHUB_TOKEN}"
      PROCESSED_TOPIC: "${PROCESSED_TOPIC}"
      CONSUMER_CONFIG: "${CONSUMER_CONFIG}"
      PRODUCER_CONFIG: "${PRODUCER_CONFIG}"
      TEMPLATE: "${TEMPLATE}"
      OPENAI_API_KEY: "${OPENAI_API_KEY}"
    volumes:
      - ./recovery/add_qdrant_service:/bytewax/recovery/add_qdrant_service
    command: ["python", "-m", "bytewax.run", "-r", "/bytewax/recovery/add_qdrant_service", "-s", "3", "-b", "0", "-w4", "dataflows/add_qdrant_service"]

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    depends_on:
      init-topics:
        condition: service_completed_successfully
    ports:
      - 8080:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
    volumes:
      - ./kui/config.yml:/etc/kafkaui/dynamic_config.yaml

  rest-proxy:
    image: confluentinc/cp-kafka-rest:6.0.0
    depends_on:
      init-topics:
        condition: service_completed_successfully
    ports:
      - 8082:8082
    hostname: rest-proxy
    container_name: rest-proxy
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: 'kafka_b:9094'
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    hostname: schema-registry
    depends_on:
      init-topics:
        condition: service_completed_successfully
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka_b:9094,PLAINTEXT_INTERNAL://localhost:29092

volumes:
  qdrant-storage:
    driver: local
  kafka_data:
    driver: local
