name: "Debezium Intergration Testing"

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        options: >
          --health-cmd="pg_isready" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=5
        volumes:
          - ./init.sql:/docker-entrypoint-initdb.d/init.sql

      debezium:
        image: debezium/connect:2.6.2.Final
        ports:
          - 8083:8083
        env:
          BOOTSTRAP_SERVERS: "${{ env.kafka_runner_address }}:9094"
          GROUP_ID: "1"
          CONFIG_STORAGE_TOPIC: "debezium_connect_configs"
          OFFSET_STORAGE_TOPIC: "debezium_connect_offsets"
          STATUS_STORAGE_TOPIC: "debezium_connect_statuses"
          KEY_CONVERTER_SCHEMAS_ENABLE: "false"
          VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
          CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
          CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
          CONNECT_REST_ADVERTISED_HOST_NAME: "debezium"
          CONNECT_CONFIG_PROVIDERS: "env"
          CONNECT_CONFIG_PROVIDERS_ENV_CLASS: "org.apache.kafka.common.config.provider.EnvVarConfigProvider"
          POSTGRES_HOSTNAME: ${{ secrets.POSTGRES_HOSTNAME }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        options: >
          --health-cmd="curl -f http://localhost:8083/"
          --health-interval=30s
          --health-timeout=10s
          --health-retries=5
          --health-start-period=40s
      init-debezium:
        image: curlimages/curl:latest
        depends_on:
          debezium:
            condition: service_healthy
        command: /kafka/debezium-setup/init-connector-config.sh
        volumes:
          - ./debezium-setup:/kafka/debezium-setup:ro

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Kafka KRaft Broker
        uses: spicyparrot/kafka-kraft-action@v1.1.0
        with:
          kafka-version: "3.7.0"
          kafka-topics: "custom_topic,1"

      - name: Set environment variables
        run: |
          echo "GITHUB_TOKEN=${{ secrets.TOKEN_GITHUB }}" >> $GITHUB_ENV
          echo "BROKERS=${{ env.kafka_runner_address }}:9093" >> $GITHUB_ENV
          echo "INPUT_TOPIC=repos-topic" >> $GITHUB_ENV
          echo "OUTPUT_TOPIC=github-commits-out" >> $GITHUB_ENV
          echo "CONSUMER_CONFIG={\"bootstrap.servers\": \"${{ env.kafka_runner_address }}:9093\",\"group.id\": \"your_unique_group_id\",\"auto.offset.reset\": \"latest\",\"enable.auto.commit\": \"true\"}" >> $GITHUB_ENV
          echo "PRODUCER_CONFIG={\"bootstrap.servers\": \"${{ env.kafka_runner_address }}:9093\"}" >> $GITHUB_ENV
          echo "PROCESSED_TOPIC=addtovectordb" >> $GITHUB_ENV
          echo "VECTORDB_TOPIC_NAME="QdrantOutput"" >> $GITHUB_ENV
          echo "MODEL_PROVIDER=fake" >> $GITHUB_ENV
          echo "OPENAI_API_KEY=sk-fakekeyapikey" >> $GITHUB_ENV
          echo "TEMPLATE=${{ secrets.TEMPLATE }}" >> $GITHUB_ENV
          echo "VECTOR_DB_HOST=localhost" >> $GITHUB_ENV
          echo "LOCAL_LLM_URL=localhost" >> $GITHUB_ENV
          echo "PDF_INPUT=pdfInput" >> $GITHUB_ENV
          echo "POSTGRES_HOSTNAME=0.0.0.0" >> $GITHUB_ENV
          echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> $GITHUB_ENV
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> $GITHUB_ENV
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> $GITHUB_ENV
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> $GITHUB_ENV
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: ðŸ§ª Run Intergration Tests
        run: pytest tests/test_debezium.py
